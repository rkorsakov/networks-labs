syntax = "proto3";
option go_package = "./proto";

// Роль узла в топологии связей узлов в пределах игры
enum NodeRole {
  NORMAL = 0; // Обычный узел, лист в топологии "звезда"
  MASTER = 1; // Главный узел, центр в топологии "звезда"
  DEPUTY = 2; // Заместитель главного узла
  VIEWER = 3; // Наблюдатель, похож на NORMAL, но не имеет змеи в статусе ALIVE, только получает обновления статуса
}

// Тип игрока
enum PlayerType {
  HUMAN = 0; // Живой пользователь
  ROBOT = 1; // Робот, управляет своей змеёй с помощью алгоритма (это не нужно реализовывать, но предусмотрено в протоколе на будущее)
}

// Игрок
message GamePlayer {
  string name = 1;           // Имя игрока (для отображения в интерфейсе)
  int32 id = 2;              // Уникальный идентификатор игрока в пределах игры
  string ip_address = 3;     // IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
  int32 port = 4;            // Порт UDP-сокета игрока. Отсутствует в описании игрока-отправителя сообщения
  NodeRole role = 5;         // Роль узла в топологии
  PlayerType type = 6;       // Тип игрока
  int32 score = 7;           // Число очков, которые набрал игрок
}

/* Параметры идущей игры (не должны меняться в процессе игры) */
message GameConfig {
  int32 width = 1;           // Ширина поля в клетках (от 10 до 100)
  int32 height = 2;          // Высота поля в клетках (от 10 до 100)
  int32 food_static = 3;     // Количество клеток с едой, независимо от числа игроков (от 0 до 100)
  int32 state_delay_ms = 4;  // Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 100 до 3000)
}

/* Игроки конкретной игры */
message GamePlayers {
  repeated GamePlayer players = 1; // Список всех игроков
}

enum Direction {
  UP = 0;     // Вверх (в отрицательном направлении оси y)
  DOWN = 1;   // Вниз (в положительном направлении оси y)
  LEFT = 2;   // Влево (в отрицательном направлении оси x)
  RIGHT = 3;  // Вправо (в положительном направлении оси x)
}

/* Текущее состояние игрового поля */
message GameState {
  /* Координаты в пределах игрового поля, либо относительное смещение координат.
   * Левая верхняя клетка поля имеет координаты (x=0, y=0).
   * Направление смещения задаётся знаком чисел. */
  message Coord {
    sint32 x = 1; // По горизонтальной оси, положительное направление - вправо
    sint32 y = 2; // По вертикальной оси, положительное направление - вниз
  }

  // Змея
  message Snake {
    // Статус змеи в игре
    enum SnakeState {
      ALIVE = 0;  // Змея управляется игроком
      ZOMBIE = 1; // Змея принадлежала игроку, который вышел из игры, она продолжает движение куда глаза глядят
    }
    int32 player_id = 1; // Идентификатор игрока-владельца змеи, см. GamePlayer.id
    /* Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
     * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
     * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. */
    repeated Coord points = 2;
    SnakeState state = 3; // статус змеи в игре
    Direction head_direction = 4; // Направление, в котором "повёрнута" голова змейки в текущий момент
  }

  int32 state_order = 1;   // Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
  repeated Snake snakes = 2;        // Список змей
  repeated Coord foods = 3;         // Список клеток с едой
  GamePlayers players = 4; // Актуальнейший список игроков
}

message GameAnnouncement {
  GamePlayers players = 1;            // Текущие игроки
  GameConfig config = 2;              // Параметры игры
  bool can_join = 3;                  // Можно ли новому игроку присоединиться к игре (есть ли место на поле)
  string game_name = 4;               // Глобально уникальное имя игры, например "my game"
}

// Общий формат любого UDP-сообщения
message GameMessage {
  // Ничего не меняем, просто говорим, что мы живы
  message PingMsg {
  }

  // Не-центральный игрок просит повернуть голову змеи
  message SteerMsg {
    Direction direction = 1; // Куда повернуть на следующем шаге
  }

  // Подтверждение сообщения с таким же seq
  message AckMsg {
  }

  // Центральный узел сообщает остальным игрокам состояние игры
  message StateMsg {
    GameState state = 1; // Состояние игрового поля
  }

  // Уведомление об идущих играх, регулярно отправляется multicast-ом или в ответ на DiscoverMsg
  message AnnouncementMsg {
    repeated GameAnnouncement games = 1; // Идущие игры (в текущей версии задачи тут всегда ровно одна игра)
  }

  // Запрос информации об идущих играх
  message DiscoverMsg {
  }

  // Новый игрок хочет присоединиться к идущей игре
  message JoinMsg {
    PlayerType player_type = 1; // Тип присоединяющегося игрока
    string player_name = 3;     // Имя игрока
    string game_name = 4;       // Глобально уникальное имя игры, к которой хотим присоединиться
    NodeRole requested_role = 5; // NORMAL, если хотим играть; VIEWER, если хотим только понаблюдать; остальные значения недопустимы
  }

  // Ошибка операции (например отказ в присоединении к игре, т.к. нет места на поле)
  message ErrorMsg {
    string error_message = 1; // Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
  }

  /* Сообщение о смене роли:
   * 1. от заместителя другим игрокам о том, что пора начинать считать его главным (sender_role = MASTER)
   * 2. от осознанно выходящего игрока (sender_role = VIEWER)
   * 3. от главного к умершему игроку (receiver_role = VIEWER)
   * 4. в комбинации с 1,2 или отдельно от них: назначение кого-то заместителем (receiver_role = DEPUTY)
   * 5. в комбинации с 2 от главного узла заместителю о том, что он становится главным (receiver_role = MASTER)
   */
  message RoleChangeMsg {
    NodeRole sender_role = 1;
    NodeRole receiver_role = 2;
  }

  int64 msg_seq = 1;         // Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
  int32 sender_id = 10;      // ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
  int32 receiver_id = 11;    // ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)

  // Тип сообщения
  oneof Type {
    PingMsg ping = 2;
    SteerMsg steer = 3;
    AckMsg ack = 4;
    StateMsg state = 5;
    AnnouncementMsg announcement = 6;
    JoinMsg join = 7;
    ErrorMsg error = 8;
    RoleChangeMsg role_change = 9;
    DiscoverMsg discover = 12;
  }
}