// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v6.31.0--rc2
// source: snakes.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Роль узла в топологии связей узлов в пределах игры
type NodeRole int32

const (
	NodeRole_NORMAL NodeRole = 0 // Обычный узел, лист в топологии "звезда"
	NodeRole_MASTER NodeRole = 1 // Главный узел, центр в топологии "звезда"
	NodeRole_DEPUTY NodeRole = 2 // Заместитель главного узла
	NodeRole_VIEWER NodeRole = 3 // Наблюдатель, похож на NORMAL, но не имеет змеи в статусе ALIVE, только получает обновления статуса
)

// Enum value maps for NodeRole.
var (
	NodeRole_name = map[int32]string{
		0: "NORMAL",
		1: "MASTER",
		2: "DEPUTY",
		3: "VIEWER",
	}
	NodeRole_value = map[string]int32{
		"NORMAL": 0,
		"MASTER": 1,
		"DEPUTY": 2,
		"VIEWER": 3,
	}
)

func (x NodeRole) Enum() *NodeRole {
	p := new(NodeRole)
	*p = x
	return p
}

func (x NodeRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeRole) Descriptor() protoreflect.EnumDescriptor {
	return file_snakes_proto_enumTypes[0].Descriptor()
}

func (NodeRole) Type() protoreflect.EnumType {
	return &file_snakes_proto_enumTypes[0]
}

func (x NodeRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeRole.Descriptor instead.
func (NodeRole) EnumDescriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{0}
}

// Тип игрока
type PlayerType int32

const (
	PlayerType_HUMAN PlayerType = 0 // Живой пользователь
	PlayerType_ROBOT PlayerType = 1 // Робот, управляет своей змеёй с помощью алгоритма (это не нужно реализовывать, но предусмотрено в протоколе на будущее)
)

// Enum value maps for PlayerType.
var (
	PlayerType_name = map[int32]string{
		0: "HUMAN",
		1: "ROBOT",
	}
	PlayerType_value = map[string]int32{
		"HUMAN": 0,
		"ROBOT": 1,
	}
)

func (x PlayerType) Enum() *PlayerType {
	p := new(PlayerType)
	*p = x
	return p
}

func (x PlayerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerType) Descriptor() protoreflect.EnumDescriptor {
	return file_snakes_proto_enumTypes[1].Descriptor()
}

func (PlayerType) Type() protoreflect.EnumType {
	return &file_snakes_proto_enumTypes[1]
}

func (x PlayerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerType.Descriptor instead.
func (PlayerType) EnumDescriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{1}
}

type Direction int32

const (
	Direction_UP    Direction = 0 // Вверх (в отрицательном направлении оси y)
	Direction_DOWN  Direction = 1 // Вниз (в положительном направлении оси y)
	Direction_LEFT  Direction = 2 // Влево (в отрицательном направлении оси x)
	Direction_RIGHT Direction = 3 // Вправо (в положительном направлении оси x)
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "UP",
		1: "DOWN",
		2: "LEFT",
		3: "RIGHT",
	}
	Direction_value = map[string]int32{
		"UP":    0,
		"DOWN":  1,
		"LEFT":  2,
		"RIGHT": 3,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_snakes_proto_enumTypes[2].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_snakes_proto_enumTypes[2]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{2}
}

// Статус змеи в игре
type GameState_Snake_SnakeState int32

const (
	GameState_Snake_ALIVE  GameState_Snake_SnakeState = 0 // Змея управляется игроком
	GameState_Snake_ZOMBIE GameState_Snake_SnakeState = 1 // Змея принадлежала игроку, который вышел из игры, она продолжает движение куда глаза глядят
)

// Enum value maps for GameState_Snake_SnakeState.
var (
	GameState_Snake_SnakeState_name = map[int32]string{
		0: "ALIVE",
		1: "ZOMBIE",
	}
	GameState_Snake_SnakeState_value = map[string]int32{
		"ALIVE":  0,
		"ZOMBIE": 1,
	}
)

func (x GameState_Snake_SnakeState) Enum() *GameState_Snake_SnakeState {
	p := new(GameState_Snake_SnakeState)
	*p = x
	return p
}

func (x GameState_Snake_SnakeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState_Snake_SnakeState) Descriptor() protoreflect.EnumDescriptor {
	return file_snakes_proto_enumTypes[3].Descriptor()
}

func (GameState_Snake_SnakeState) Type() protoreflect.EnumType {
	return &file_snakes_proto_enumTypes[3]
}

func (x GameState_Snake_SnakeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameState_Snake_SnakeState.Descriptor instead.
func (GameState_Snake_SnakeState) EnumDescriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{3, 1, 0}
}

// Игрок
type GamePlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                            // Имя игрока (для отображения в интерфейсе)
	Id        int32      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                               // Уникальный идентификатор игрока в пределах игры
	IpAddress string     `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"` // IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
	Port      int32      `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`                           // Порт UDP-сокета игрока. Отсутствует в описании игрока-отправителя сообщения
	Role      NodeRole   `protobuf:"varint,5,opt,name=role,proto3,enum=NodeRole" json:"role,omitempty"`             // Роль узла в топологии
	Type      PlayerType `protobuf:"varint,6,opt,name=type,proto3,enum=PlayerType" json:"type,omitempty"`           // Тип игрока
	Score     int32      `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`                         // Число очков, которые набрал игрок
}

func (x *GamePlayer) Reset() {
	*x = GamePlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayer) ProtoMessage() {}

func (x *GamePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayer.ProtoReflect.Descriptor instead.
func (*GamePlayer) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{0}
}

func (x *GamePlayer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GamePlayer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GamePlayer) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *GamePlayer) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GamePlayer) GetRole() NodeRole {
	if x != nil {
		return x.Role
	}
	return NodeRole_NORMAL
}

func (x *GamePlayer) GetType() PlayerType {
	if x != nil {
		return x.Type
	}
	return PlayerType_HUMAN
}

func (x *GamePlayer) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// Параметры идущей игры (не должны меняться в процессе игры)
type GameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width        int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`                                     // Ширина поля в клетках (от 10 до 100)
	Height       int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`                                   // Высота поля в клетках (от 10 до 100)
	FoodStatic   int32 `protobuf:"varint,3,opt,name=food_static,json=foodStatic,proto3" json:"food_static,omitempty"`         // Количество клеток с едой, независимо от числа игроков (от 0 до 100)
	StateDelayMs int32 `protobuf:"varint,4,opt,name=state_delay_ms,json=stateDelayMs,proto3" json:"state_delay_ms,omitempty"` // Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 100 до 3000)
}

func (x *GameConfig) Reset() {
	*x = GameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameConfig) ProtoMessage() {}

func (x *GameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameConfig.ProtoReflect.Descriptor instead.
func (*GameConfig) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{1}
}

func (x *GameConfig) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GameConfig) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GameConfig) GetFoodStatic() int32 {
	if x != nil {
		return x.FoodStatic
	}
	return 0
}

func (x *GameConfig) GetStateDelayMs() int32 {
	if x != nil {
		return x.StateDelayMs
	}
	return 0
}

// Игроки конкретной игры
type GamePlayers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*GamePlayer `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"` // Список всех игроков
}

func (x *GamePlayers) Reset() {
	*x = GamePlayers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayers) ProtoMessage() {}

func (x *GamePlayers) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayers.ProtoReflect.Descriptor instead.
func (*GamePlayers) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{2}
}

func (x *GamePlayers) GetPlayers() []*GamePlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

// Текущее состояние игрового поля
type GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateOrder int32              `protobuf:"varint,1,opt,name=state_order,json=stateOrder,proto3" json:"state_order,omitempty"` // Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
	Snakes     []*GameState_Snake `protobuf:"bytes,2,rep,name=snakes,proto3" json:"snakes,omitempty"`                            // Список змей
	Foods      []*GameState_Coord `protobuf:"bytes,3,rep,name=foods,proto3" json:"foods,omitempty"`                              // Список клеток с едой
	Players    *GamePlayers       `protobuf:"bytes,4,opt,name=players,proto3" json:"players,omitempty"`                          // Актуальнейший список игроков
}

func (x *GameState) Reset() {
	*x = GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{3}
}

func (x *GameState) GetStateOrder() int32 {
	if x != nil {
		return x.StateOrder
	}
	return 0
}

func (x *GameState) GetSnakes() []*GameState_Snake {
	if x != nil {
		return x.Snakes
	}
	return nil
}

func (x *GameState) GetFoods() []*GameState_Coord {
	if x != nil {
		return x.Foods
	}
	return nil
}

func (x *GameState) GetPlayers() *GamePlayers {
	if x != nil {
		return x.Players
	}
	return nil
}

type GameAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players  *GamePlayers `protobuf:"bytes,1,opt,name=players,proto3" json:"players,omitempty"`                   // Текущие игроки
	Config   *GameConfig  `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`                     // Параметры игры
	CanJoin  bool         `protobuf:"varint,3,opt,name=can_join,json=canJoin,proto3" json:"can_join,omitempty"`   // Можно ли новому игроку присоединиться к игре (есть ли место на поле)
	GameName string       `protobuf:"bytes,4,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"` // Глобально уникальное имя игры, например "my game"
}

func (x *GameAnnouncement) Reset() {
	*x = GameAnnouncement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameAnnouncement) ProtoMessage() {}

func (x *GameAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameAnnouncement.ProtoReflect.Descriptor instead.
func (*GameAnnouncement) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{4}
}

func (x *GameAnnouncement) GetPlayers() *GamePlayers {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameAnnouncement) GetConfig() *GameConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GameAnnouncement) GetCanJoin() bool {
	if x != nil {
		return x.CanJoin
	}
	return false
}

func (x *GameAnnouncement) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

// Общий формат любого UDP-сообщения
type GameMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSeq     int64 `protobuf:"varint,1,opt,name=msg_seq,json=msgSeq,proto3" json:"msg_seq,omitempty"`              // Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
	SenderId   int32 `protobuf:"varint,10,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`       // ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
	ReceiverId int32 `protobuf:"varint,11,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"` // ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
	// Тип сообщения
	//
	// Types that are assignable to Type:
	//
	//	*GameMessage_Ping
	//	*GameMessage_Steer
	//	*GameMessage_Ack
	//	*GameMessage_State
	//	*GameMessage_Announcement
	//	*GameMessage_Join
	//	*GameMessage_Error
	//	*GameMessage_RoleChange
	//	*GameMessage_Discover
	Type isGameMessage_Type `protobuf_oneof:"Type"`
}

func (x *GameMessage) Reset() {
	*x = GameMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage) ProtoMessage() {}

func (x *GameMessage) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage.ProtoReflect.Descriptor instead.
func (*GameMessage) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5}
}

func (x *GameMessage) GetMsgSeq() int64 {
	if x != nil {
		return x.MsgSeq
	}
	return 0
}

func (x *GameMessage) GetSenderId() int32 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

func (x *GameMessage) GetReceiverId() int32 {
	if x != nil {
		return x.ReceiverId
	}
	return 0
}

func (m *GameMessage) GetType() isGameMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *GameMessage) GetPing() *GameMessage_PingMsg {
	if x, ok := x.GetType().(*GameMessage_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *GameMessage) GetSteer() *GameMessage_SteerMsg {
	if x, ok := x.GetType().(*GameMessage_Steer); ok {
		return x.Steer
	}
	return nil
}

func (x *GameMessage) GetAck() *GameMessage_AckMsg {
	if x, ok := x.GetType().(*GameMessage_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *GameMessage) GetState() *GameMessage_StateMsg {
	if x, ok := x.GetType().(*GameMessage_State); ok {
		return x.State
	}
	return nil
}

func (x *GameMessage) GetAnnouncement() *GameMessage_AnnouncementMsg {
	if x, ok := x.GetType().(*GameMessage_Announcement); ok {
		return x.Announcement
	}
	return nil
}

func (x *GameMessage) GetJoin() *GameMessage_JoinMsg {
	if x, ok := x.GetType().(*GameMessage_Join); ok {
		return x.Join
	}
	return nil
}

func (x *GameMessage) GetError() *GameMessage_ErrorMsg {
	if x, ok := x.GetType().(*GameMessage_Error); ok {
		return x.Error
	}
	return nil
}

func (x *GameMessage) GetRoleChange() *GameMessage_RoleChangeMsg {
	if x, ok := x.GetType().(*GameMessage_RoleChange); ok {
		return x.RoleChange
	}
	return nil
}

func (x *GameMessage) GetDiscover() *GameMessage_DiscoverMsg {
	if x, ok := x.GetType().(*GameMessage_Discover); ok {
		return x.Discover
	}
	return nil
}

type isGameMessage_Type interface {
	isGameMessage_Type()
}

type GameMessage_Ping struct {
	Ping *GameMessage_PingMsg `protobuf:"bytes,2,opt,name=ping,proto3,oneof"`
}

type GameMessage_Steer struct {
	Steer *GameMessage_SteerMsg `protobuf:"bytes,3,opt,name=steer,proto3,oneof"`
}

type GameMessage_Ack struct {
	Ack *GameMessage_AckMsg `protobuf:"bytes,4,opt,name=ack,proto3,oneof"`
}

type GameMessage_State struct {
	State *GameMessage_StateMsg `protobuf:"bytes,5,opt,name=state,proto3,oneof"`
}

type GameMessage_Announcement struct {
	Announcement *GameMessage_AnnouncementMsg `protobuf:"bytes,6,opt,name=announcement,proto3,oneof"`
}

type GameMessage_Join struct {
	Join *GameMessage_JoinMsg `protobuf:"bytes,7,opt,name=join,proto3,oneof"`
}

type GameMessage_Error struct {
	Error *GameMessage_ErrorMsg `protobuf:"bytes,8,opt,name=error,proto3,oneof"`
}

type GameMessage_RoleChange struct {
	RoleChange *GameMessage_RoleChangeMsg `protobuf:"bytes,9,opt,name=role_change,json=roleChange,proto3,oneof"`
}

type GameMessage_Discover struct {
	Discover *GameMessage_DiscoverMsg `protobuf:"bytes,12,opt,name=discover,proto3,oneof"`
}

func (*GameMessage_Ping) isGameMessage_Type() {}

func (*GameMessage_Steer) isGameMessage_Type() {}

func (*GameMessage_Ack) isGameMessage_Type() {}

func (*GameMessage_State) isGameMessage_Type() {}

func (*GameMessage_Announcement) isGameMessage_Type() {}

func (*GameMessage_Join) isGameMessage_Type() {}

func (*GameMessage_Error) isGameMessage_Type() {}

func (*GameMessage_RoleChange) isGameMessage_Type() {}

func (*GameMessage_Discover) isGameMessage_Type() {}

// Координаты в пределах игрового поля, либо относительное смещение координат.
// Левая верхняя клетка поля имеет координаты (x=0, y=0).
// Направление смещения задаётся знаком чисел.
type GameState_Coord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"zigzag32,1,opt,name=x,proto3" json:"x,omitempty"` // По горизонтальной оси, положительное направление - вправо
	Y int32 `protobuf:"zigzag32,2,opt,name=y,proto3" json:"y,omitempty"` // По вертикальной оси, положительное направление - вниз
}

func (x *GameState_Coord) Reset() {
	*x = GameState_Coord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState_Coord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState_Coord) ProtoMessage() {}

func (x *GameState_Coord) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState_Coord.ProtoReflect.Descriptor instead.
func (*GameState_Coord) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GameState_Coord) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *GameState_Coord) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

// Змея
type GameState_Snake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId int32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"` // Идентификатор игрока-владельца змеи, см. GamePlayer.id
	// Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
	// Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
	// в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки.
	Points        []*GameState_Coord         `protobuf:"bytes,2,rep,name=points,proto3" json:"points,omitempty"`
	State         GameState_Snake_SnakeState `protobuf:"varint,3,opt,name=state,proto3,enum=GameState_Snake_SnakeState" json:"state,omitempty"`                     // статус змеи в игре
	HeadDirection Direction                  `protobuf:"varint,4,opt,name=head_direction,json=headDirection,proto3,enum=Direction" json:"head_direction,omitempty"` // Направление, в котором "повёрнута" голова змейки в текущий момент
}

func (x *GameState_Snake) Reset() {
	*x = GameState_Snake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState_Snake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState_Snake) ProtoMessage() {}

func (x *GameState_Snake) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState_Snake.ProtoReflect.Descriptor instead.
func (*GameState_Snake) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{3, 1}
}

func (x *GameState_Snake) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *GameState_Snake) GetPoints() []*GameState_Coord {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *GameState_Snake) GetState() GameState_Snake_SnakeState {
	if x != nil {
		return x.State
	}
	return GameState_Snake_ALIVE
}

func (x *GameState_Snake) GetHeadDirection() Direction {
	if x != nil {
		return x.HeadDirection
	}
	return Direction_UP
}

// Ничего не меняем, просто говорим, что мы живы
type GameMessage_PingMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GameMessage_PingMsg) Reset() {
	*x = GameMessage_PingMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMessage_PingMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_PingMsg) ProtoMessage() {}

func (x *GameMessage_PingMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_PingMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_PingMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 0}
}

// Не-центральный игрок просит повернуть голову змеи
type GameMessage_SteerMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=Direction" json:"direction,omitempty"` // Куда повернуть на следующем шаге
}

func (x *GameMessage_SteerMsg) Reset() {
	*x = GameMessage_SteerMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMessage_SteerMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_SteerMsg) ProtoMessage() {}

func (x *GameMessage_SteerMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_SteerMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_SteerMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 1}
}

func (x *GameMessage_SteerMsg) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_UP
}

// Подтверждение сообщения с таким же seq
type GameMessage_AckMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GameMessage_AckMsg) Reset() {
	*x = GameMessage_AckMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMessage_AckMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_AckMsg) ProtoMessage() {}

func (x *GameMessage_AckMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_AckMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_AckMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 2}
}

// Центральный узел сообщает остальным игрокам состояние игры
type GameMessage_StateMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *GameState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"` // Состояние игрового поля
}

func (x *GameMessage_StateMsg) Reset() {
	*x = GameMessage_StateMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMessage_StateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_StateMsg) ProtoMessage() {}

func (x *GameMessage_StateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_StateMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_StateMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 3}
}

func (x *GameMessage_StateMsg) GetState() *GameState {
	if x != nil {
		return x.State
	}
	return nil
}

// Уведомление об идущих играх, регулярно отправляется multicast-ом или в ответ на DiscoverMsg
type GameMessage_AnnouncementMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Games []*GameAnnouncement `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"` // Идущие игры (в текущей версии задачи тут всегда ровно одна игра)
}

func (x *GameMessage_AnnouncementMsg) Reset() {
	*x = GameMessage_AnnouncementMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMessage_AnnouncementMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_AnnouncementMsg) ProtoMessage() {}

func (x *GameMessage_AnnouncementMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_AnnouncementMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_AnnouncementMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 4}
}

func (x *GameMessage_AnnouncementMsg) GetGames() []*GameAnnouncement {
	if x != nil {
		return x.Games
	}
	return nil
}

// Запрос информации об идущих играх
type GameMessage_DiscoverMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GameMessage_DiscoverMsg) Reset() {
	*x = GameMessage_DiscoverMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMessage_DiscoverMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_DiscoverMsg) ProtoMessage() {}

func (x *GameMessage_DiscoverMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_DiscoverMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_DiscoverMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 5}
}

// Новый игрок хочет присоединиться к идущей игре
type GameMessage_JoinMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerType    PlayerType `protobuf:"varint,1,opt,name=player_type,json=playerType,proto3,enum=PlayerType" json:"player_type,omitempty"`        // Тип присоединяющегося игрока
	PlayerName    string     `protobuf:"bytes,3,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`                         // Имя игрока
	GameName      string     `protobuf:"bytes,4,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`                               // Глобально уникальное имя игры, к которой хотим присоединиться
	RequestedRole NodeRole   `protobuf:"varint,5,opt,name=requested_role,json=requestedRole,proto3,enum=NodeRole" json:"requested_role,omitempty"` // NORMAL, если хотим играть; VIEWER, если хотим только понаблюдать; остальные значения недопустимы
}

func (x *GameMessage_JoinMsg) Reset() {
	*x = GameMessage_JoinMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMessage_JoinMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_JoinMsg) ProtoMessage() {}

func (x *GameMessage_JoinMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_JoinMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_JoinMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 6}
}

func (x *GameMessage_JoinMsg) GetPlayerType() PlayerType {
	if x != nil {
		return x.PlayerType
	}
	return PlayerType_HUMAN
}

func (x *GameMessage_JoinMsg) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *GameMessage_JoinMsg) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *GameMessage_JoinMsg) GetRequestedRole() NodeRole {
	if x != nil {
		return x.RequestedRole
	}
	return NodeRole_NORMAL
}

// Ошибка операции (например отказ в присоединении к игре, т.к. нет места на поле)
type GameMessage_ErrorMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
}

func (x *GameMessage_ErrorMsg) Reset() {
	*x = GameMessage_ErrorMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMessage_ErrorMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_ErrorMsg) ProtoMessage() {}

func (x *GameMessage_ErrorMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_ErrorMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_ErrorMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 7}
}

func (x *GameMessage_ErrorMsg) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Сообщение о смене роли:
// 1. от заместителя другим игрокам о том, что пора начинать считать его главным (sender_role = MASTER)
// 2. от осознанно выходящего игрока (sender_role = VIEWER)
// 3. от главного к умершему игроку (receiver_role = VIEWER)
// 4. в комбинации с 1,2 или отдельно от них: назначение кого-то заместителем (receiver_role = DEPUTY)
// 5. в комбинации с 2 от главного узла заместителю о том, что он становится главным (receiver_role = MASTER)
type GameMessage_RoleChangeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderRole   NodeRole `protobuf:"varint,1,opt,name=sender_role,json=senderRole,proto3,enum=NodeRole" json:"sender_role,omitempty"`
	ReceiverRole NodeRole `protobuf:"varint,2,opt,name=receiver_role,json=receiverRole,proto3,enum=NodeRole" json:"receiver_role,omitempty"`
}

func (x *GameMessage_RoleChangeMsg) Reset() {
	*x = GameMessage_RoleChangeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMessage_RoleChangeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_RoleChangeMsg) ProtoMessage() {}

func (x *GameMessage_RoleChangeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_RoleChangeMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_RoleChangeMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 8}
}

func (x *GameMessage_RoleChangeMsg) GetSenderRole() NodeRole {
	if x != nil {
		return x.SenderRole
	}
	return NodeRole_NORMAL
}

func (x *GameMessage_RoleChangeMsg) GetReceiverRole() NodeRole {
	if x != nil {
		return x.ReceiverRole
	}
	return NodeRole_NORMAL
}

var File_snakes_proto protoreflect.FileDescriptor

var file_snakes_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9,
	0x01, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0a, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x6f, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x6f,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x22, 0x34,
	0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x22, 0xa7, 0x03, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x52, 0x06, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x05, 0x66, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x05,
	0x66, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0x23, 0x0a,
	0x05, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x01, 0x79, 0x1a, 0xd9, 0x01, 0x0a, 0x05, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x64,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x0a, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x49, 0x56, 0x45,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x5a, 0x4f, 0x4d, 0x42, 0x49, 0x45, 0x10, 0x01, 0x22, 0x97,
	0x01, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc1, 0x08, 0x0a, 0x0b, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f,
	0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x53, 0x65,
	0x71, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x05, 0x73,
	0x74, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x65, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x03, 0x61, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x63, 0x6b, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x6f,
	0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x73, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x36, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x1a, 0x09, 0x0a, 0x07, 0x50, 0x69, 0x6e, 0x67,
	0x4d, 0x73, 0x67, 0x1a, 0x34, 0x0a, 0x08, 0x53, 0x74, 0x65, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x28, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x08, 0x0a, 0x06, 0x41, 0x63, 0x6b,
	0x4d, 0x73, 0x67, 0x1a, 0x2c, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x20, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x3a, 0x0a, 0x0f, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x0d, 0x0a,
	0x0b, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0xa7, 0x01, 0x0a,
	0x07, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x2f, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x6b, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x2a, 0x3a, 0x0a, 0x08,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x50, 0x55, 0x54, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x22, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x55, 0x4d, 0x41, 0x4e, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x10, 0x01, 0x2a, 0x32, 0x0a, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c,
	0x45, 0x46, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03,
	0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_snakes_proto_rawDescOnce sync.Once
	file_snakes_proto_rawDescData = file_snakes_proto_rawDesc
)

func file_snakes_proto_rawDescGZIP() []byte {
	file_snakes_proto_rawDescOnce.Do(func() {
		file_snakes_proto_rawDescData = protoimpl.X.CompressGZIP(file_snakes_proto_rawDescData)
	})
	return file_snakes_proto_rawDescData
}

var file_snakes_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_snakes_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_snakes_proto_goTypes = []interface{}{
	(NodeRole)(0),                       // 0: NodeRole
	(PlayerType)(0),                     // 1: PlayerType
	(Direction)(0),                      // 2: Direction
	(GameState_Snake_SnakeState)(0),     // 3: GameState.Snake.SnakeState
	(*GamePlayer)(nil),                  // 4: GamePlayer
	(*GameConfig)(nil),                  // 5: GameConfig
	(*GamePlayers)(nil),                 // 6: GamePlayers
	(*GameState)(nil),                   // 7: GameState
	(*GameAnnouncement)(nil),            // 8: GameAnnouncement
	(*GameMessage)(nil),                 // 9: GameMessage
	(*GameState_Coord)(nil),             // 10: GameState.Coord
	(*GameState_Snake)(nil),             // 11: GameState.Snake
	(*GameMessage_PingMsg)(nil),         // 12: GameMessage.PingMsg
	(*GameMessage_SteerMsg)(nil),        // 13: GameMessage.SteerMsg
	(*GameMessage_AckMsg)(nil),          // 14: GameMessage.AckMsg
	(*GameMessage_StateMsg)(nil),        // 15: GameMessage.StateMsg
	(*GameMessage_AnnouncementMsg)(nil), // 16: GameMessage.AnnouncementMsg
	(*GameMessage_DiscoverMsg)(nil),     // 17: GameMessage.DiscoverMsg
	(*GameMessage_JoinMsg)(nil),         // 18: GameMessage.JoinMsg
	(*GameMessage_ErrorMsg)(nil),        // 19: GameMessage.ErrorMsg
	(*GameMessage_RoleChangeMsg)(nil),   // 20: GameMessage.RoleChangeMsg
}
var file_snakes_proto_depIdxs = []int32{
	0,  // 0: GamePlayer.role:type_name -> NodeRole
	1,  // 1: GamePlayer.type:type_name -> PlayerType
	4,  // 2: GamePlayers.players:type_name -> GamePlayer
	11, // 3: GameState.snakes:type_name -> GameState.Snake
	10, // 4: GameState.foods:type_name -> GameState.Coord
	6,  // 5: GameState.players:type_name -> GamePlayers
	6,  // 6: GameAnnouncement.players:type_name -> GamePlayers
	5,  // 7: GameAnnouncement.config:type_name -> GameConfig
	12, // 8: GameMessage.ping:type_name -> GameMessage.PingMsg
	13, // 9: GameMessage.steer:type_name -> GameMessage.SteerMsg
	14, // 10: GameMessage.ack:type_name -> GameMessage.AckMsg
	15, // 11: GameMessage.state:type_name -> GameMessage.StateMsg
	16, // 12: GameMessage.announcement:type_name -> GameMessage.AnnouncementMsg
	18, // 13: GameMessage.join:type_name -> GameMessage.JoinMsg
	19, // 14: GameMessage.error:type_name -> GameMessage.ErrorMsg
	20, // 15: GameMessage.role_change:type_name -> GameMessage.RoleChangeMsg
	17, // 16: GameMessage.discover:type_name -> GameMessage.DiscoverMsg
	10, // 17: GameState.Snake.points:type_name -> GameState.Coord
	3,  // 18: GameState.Snake.state:type_name -> GameState.Snake.SnakeState
	2,  // 19: GameState.Snake.head_direction:type_name -> Direction
	2,  // 20: GameMessage.SteerMsg.direction:type_name -> Direction
	7,  // 21: GameMessage.StateMsg.state:type_name -> GameState
	8,  // 22: GameMessage.AnnouncementMsg.games:type_name -> GameAnnouncement
	1,  // 23: GameMessage.JoinMsg.player_type:type_name -> PlayerType
	0,  // 24: GameMessage.JoinMsg.requested_role:type_name -> NodeRole
	0,  // 25: GameMessage.RoleChangeMsg.sender_role:type_name -> NodeRole
	0,  // 26: GameMessage.RoleChangeMsg.receiver_role:type_name -> NodeRole
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_snakes_proto_init() }
func file_snakes_proto_init() {
	if File_snakes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_snakes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameAnnouncement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameState_Coord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameState_Snake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMessage_PingMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMessage_SteerMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMessage_AckMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMessage_StateMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMessage_AnnouncementMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMessage_DiscoverMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMessage_JoinMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMessage_ErrorMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMessage_RoleChangeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_snakes_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*GameMessage_Ping)(nil),
		(*GameMessage_Steer)(nil),
		(*GameMessage_Ack)(nil),
		(*GameMessage_State)(nil),
		(*GameMessage_Announcement)(nil),
		(*GameMessage_Join)(nil),
		(*GameMessage_Error)(nil),
		(*GameMessage_RoleChange)(nil),
		(*GameMessage_Discover)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snakes_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snakes_proto_goTypes,
		DependencyIndexes: file_snakes_proto_depIdxs,
		EnumInfos:         file_snakes_proto_enumTypes,
		MessageInfos:      file_snakes_proto_msgTypes,
	}.Build()
	File_snakes_proto = out.File
	file_snakes_proto_rawDesc = nil
	file_snakes_proto_goTypes = nil
	file_snakes_proto_depIdxs = nil
}
